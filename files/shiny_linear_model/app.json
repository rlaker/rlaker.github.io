[{"name": "app.py", "content": "import json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nstyle_path = Path(__file__).parent / \"custom.mplstyle\"\nplt.style.use(style_path)\nimport numpy as np\nfrom shiny import App, render, ui, reactive\n\n# data = pd.read_csv(Path(__file__).parent / \"weekly_seasonality.csv\")\n\n# #turn 0->1 into 0-7 (for days of the week)\n# data['x'] = 7*data['x']/data['x'].max()\n# data['y'] = 5*data['y']/data['y'].max()\n\n# extra_weeks = pd.DataFrame(\n#     {\n#         \"y\": np.concatenate((data['y'].values, data['y'].values)),\n#         \"x\": np.concatenate((data['x'].values+7, data['x'].values+ (2*7)))\n#         }\n# )\n\n# data = pd.concat([data, extra_weeks])\n# data = data.sort_values(\"x\")\n\n# Replace \"your_file_path.csv\" with the actual path to your CSV file\nfile_path = Path(__file__).parent / \"weekly_seasonality.csv\"\n\n# Reading CSV file into a numpy array\ndata = np.genfromtxt(file_path, delimiter=',', skip_header=1)  # Assuming the first row is a header\n\n# Assuming 'x' is in the first column and 'y' is in the second column after the header\nx = data[:, 0]\ny = data[:, 1]\n\n# Transform 'x' and 'y'\nx_transformed = 7 * x / x.max()\ny_transformed = 5 * y / y.max()\n\n# Creating extra weeks\nx_extra_weeks = np.concatenate((x_transformed + 7, x_transformed + (2 * 7)))\ny_extra_weeks = np.concatenate((y_transformed, y_transformed))\n\n# Combine original and extra weeks\nx_combined = np.concatenate((x_transformed, x_extra_weeks))\ny_combined = np.concatenate((y_transformed, y_extra_weeks))\n\n# Creating a combined array for sorting purposes\ncombined = np.column_stack((x_combined, y_combined))\n\n# Sorting by 'x' values\nsorted_indices = combined[:, 0].argsort()\ndata = combined[sorted_indices]\n\nprint(data)\n\ndef dummy(x, start, width = 1):\n    x_mod = (x % 7)\n    # Create a boolean array where True is set for elements within the specified range\n    condition = (x_mod >= start) & (x_mod < start + width)\n\n    # Convert the boolean array to an integer array (True becomes 1, False becomes 0)\n    return condition.astype(int)\n\ndef dummy_model(\n        x,\n        C_1,\n        C_2,\n        C_3,\n        C_4,\n        C_5,\n        C_6,\n        C_7,\n):\n    return (\n        C_1 * dummy(x, start= 0) + \n        C_2 * dummy(x, start= 1) + \n        C_3 * dummy(x, start= 2) + \n        C_4 * dummy(x, start= 3) + \n        C_5 * dummy(x, start= 4) + \n        C_6 * dummy(x, start= 5) + \n        C_7 * dummy(x, start= 6)\n    )\n\n\ndef rbf(x, width, center):\n    x_mod = x % 7\n    center_mod = center % 7\n    \n    # Original Gaussian\n    gauss = np.exp(-((x_mod - center_mod)**2) / (2 * width))\n    \n    # Gaussian shifted by +7\n    gauss_plus = np.exp(-((x_mod - (center_mod + 7))**2) / (2 * width))\n    \n    # Gaussian shifted by -7\n    gauss_minus = np.exp(-((x_mod - (center_mod - 7))**2) / (2 * width))\n    \n    # Sum the contributions\n    return gauss + gauss_plus + gauss_minus\n\ndef rbf_model(\n        x,\n        C_1,\n        C_2,\n        C_3,\n        C_4,\n        C_5,\n        C_6,\n        C_7,\n        width,\n):\n    return (\n        C_1 * rbf(x, width=width, center = 0) + \n        C_2 * rbf(x, width=width, center = 1) + \n        C_3 * rbf(x, width=width, center = 2) + \n        C_4 * rbf(x, width=width, center = 3) + \n        C_5 * rbf(x, width=width, center = 4) + \n        C_6 * rbf(x, width=width, center = 5) + \n        C_7 * rbf(x, width=width, center = 6)\n    )\n\n\ndef fourier_component(periods, func, order):\n    return getattr(np, func)(2 * np.pi * periods * order)\n\ndef fourier_model(\n        x,\n        C_cos_1,\n        C_sin_1,\n        C_cos_2,\n        C_sin_2\n    ):\n    return (\n        C_cos_1 * fourier_component(x/7, \"cos\", 1) + \n        C_sin_1 * fourier_component(x/7, \"sin\", 1) + \n        C_cos_2 * fourier_component(x/7, \"cos\", 2) + \n        C_sin_2 * fourier_component(x/7, \"sin\", 2)\n    )\n\n\napp_ui = ui.page_fluid(\n            ui.navset_tab(\n                ui.nav_panel(\n                    \"Dummy\",\n                    ui.page_fillable(\n                        ui.card(\n                            ui.output_plot(\"plot_dummy\"),\n                        ),\n                        ui.card(\n                            ui.layout_columns(\n                                ui.card(\n                                    ui.input_switch(\"best_fit_dummy\", \"Show best fit?\", False),  \n                                    ui.input_slider(\"C_1_dummy\", \"Monday\", 0, 5, value = 1.9 , step = 0.1),\n                                    ui.input_slider(\"C_2_dummy\", \"Tuesday\", 0, 5, value = 3.8, step = 0.1),\n                                    ui.input_slider(\"C_3_dummy\", \"Wednesday\", 0, 5, value = 4.1, step = 0.1),\n                                ),\n                                ui.card(\n                                    ui.input_slider(\"C_4_dummy\", \"Thursday\", 0, 5, value = 3.0, step = 0.1),\n                                    ui.input_slider(\"C_5_dummy\", \"Friday\", 0, 5, value = 3.3, step = 0.1),\n                                    ui.input_slider(\"C_6_dummy\", \"Saturday\", 0, 5, value = 2.8, step = 0.1),\n                                    ui.input_slider(\"C_7_dummy\", \"Sunday\", 0, 5, value = 1.8, step = 0.1),\n                                )\n                            ),\n                        ),\n                        \n                    ),\n                ),\n                ui.nav_panel(\n                    \"Radial Basis Function\",\n                    ui.page_fillable(\n                        ui.card(\n                            ui.output_plot(\"plot_rbf\"),\n                        ),\n                        ui.card(\n                            ui.layout_columns(\n                                ui.card(\n                                    ui.input_switch(\"best_fit_rbf\", \"Show best fit?\", False),  \n                                    ui.input_slider(\"width\", \"Width\", 0.01, 0.5, value = 0.3 , step = 0.01),\n                                    ui.input_slider(\"C_1_rbf\", \"Monday\", 0, 5, value =  1.2, step = 0.1),\n                                    ui.input_slider(\"C_2_rbf\", \"Tuesday\", 0, 5, value = 1.9, step = 0.1),\n                                    ui.input_slider(\"C_3_rbf\", \"Wednesday\", 0, 5, value = 3.7, step = 0.1),\n                                ),\n                                ui.card(\n                                    ui.input_slider(\"C_4_rbf\", \"Thursday\", 0, 5, value = 2.4, step = 0.1),\n                                    ui.input_slider(\"C_5_rbf\", \"Friday\", 0, 5, value = 2.2, step = 0.1),\n                                    ui.input_slider(\"C_6_rbf\", \"Saturday\", 0, 5, value = 2.6, step = 0.1),\n                                    ui.input_slider(\"C_7_rbf\", \"Sunday\", 0, 5, value = 1.8, step = 0.1),\n                                )\n                            ),\n                        ),\n                        \n                    ),\n                ),\n                ui.nav_panel(\n                    \"Fourier components\",\n                    ui.page_fillable(\n                        ui.card(\n                            ui.output_plot(\"plot_fourier\"),\n                        ),\n                        ui.layout_columns(\n                            ui.card(\n                                ui.input_switch(\"best_fit_fourier\", \"Show best fit?\", False),  \n                                ui.input_slider(\"n_order\", \"N order\", 1, 10, value = 2 , step = 1),\n                            ),\n                            ui.card(\n                                ui.input_slider(\"C_cos_1\", \"Cosine 1st order\", -1, 1, value = -0.78 , step = 0.1),\n                                ui.input_slider(\"C_sin_1\", \"Sine 1st order\", -1, 1, value = 0.38, step = 0.1),\n                                ui.input_slider(\"C_cos_2\", \"Cosine 2nd order\", -1, 1, value = -0.5, step = 0.1),\n                                ui.input_slider(\"C_sin_2\", \"Sine 2nd order\", -1, 1, value = -0.1, step = 0.1),\n                            ),\n                        ),\n                    ),\n                        \n                ),\n                selected = 'Radial Basis Function'\n            ),\n)\n\n\n# app_ui = ui.page_fluid(\n#             ui.navset_tab(\n#                 ui.nav_panel(\n#                     \"Dummy\",\n#                     ui.page_sidebar(\n#                         ui.sidebar(\n#                             ui.input_switch(\"best_fit_dummy\", \"Show best fit?\", False),  \n#                             ui.input_slider(\"C_1_dummy\", \"Monday\", 0, 5, value = 2.0 , step = 0.1),\n#                             ui.input_slider(\"C_2_dummy\", \"Tuesday\", 0, 5, value = 3.7, step = 0.1),\n#                             ui.input_slider(\"C_3_dummy\", \"Wednesday\", 0, 5, value = 4.2, step = 0.1),\n#                             ui.input_slider(\"C_4_dummy\", \"Thursday\", 0, 5, value = 3.0, step = 0.1),\n#                             ui.input_slider(\"C_5_dummy\", \"Friday\", 0, 5, value = 3.0, step = 0.1),\n#                             ui.input_slider(\"C_6_dummy\", \"Saturday\", 0, 5, value = 2.8, step = 0.1),\n#                             ui.input_slider(\"C_7_dummy\", \"Sunday\", 0, 5, value = 1.0, step = 0.1),\n#                             position=\"right\",\n#                             bg=\"#f8f8f8\",\n#                             open=\"open\"\n#                         ),\n#                         ui.output_plot(\"plot_dummy\"),\n#                     ),\n#                 ),\n#                 ui.nav_panel(\n#                     \"Radial Basis Function\",\n#                     ui.page_sidebar(\n#                         ui.sidebar(\n#                             ui.input_switch(\"best_fit_rbf\", \"Show best fit?\", False),  \n#                             ui.input_slider(\"width\", \"Width\", 0.01, 0.5, value = 0.3 , step = 0.01),\n#                             ui.input_slider(\"C_1_rbf\", \"Monday\", 0, 5, value = 2.2 , step = 0.1),\n#                             ui.input_slider(\"C_2_rbf\", \"Tuesday\", 0, 5, value = 3.7, step = 0.1),\n#                             ui.input_slider(\"C_3_rbf\", \"Wednesday\", 0, 5, value = 2.4, step = 0.1),\n#                             ui.input_slider(\"C_4_rbf\", \"Thursday\", 0, 5, value = 1.7, step = 0.1),\n#                             ui.input_slider(\"C_5_rbf\", \"Friday\", 0, 5, value = 2.3, step = 0.1),\n#                             ui.input_slider(\"C_6_rbf\", \"Saturday\", 0, 5, value = 1.4, step = 0.1),\n#                             ui.input_slider(\"C_7_rbf\", \"Sunday\", 0, 5, value = 1.0, step = 0.1),\n#                             position=\"right\",\n#                             bg=\"#f8f8f8\",\n#                             open=\"open\"\n#                         ),\n#                         ui.output_plot(\"plot_rbf\"),\n#                     ),\n#                 ),\n#                 ui.nav_panel(\n#                     \"Fourier components\",\n#                     \"2 Content\"\n#                 ),\n#                 selected = 'Radial Basis Function'\n#             )\n# )\n\n\n# ui.page_sidebar(\n#     ui.sidebar(\n#         ui.input_switch(\"best_fit\", \"Show best fit?\", False),  \n#         ui.input_slider(\"C_0\", \"Monday\", 0, 5, value = 2.0 , step = 0.1),\n#         ui.input_slider(\"C_1\", \"Tuesday\", 0, 5, value = 3.7, step = 0.1),\n#         ui.input_slider(\"C_2\", \"Wednesday\", 0, 5, value = 4.2, step = 0.1),\n#         ui.input_slider(\"C_3\", \"Thursday\", 0, 5, value = 3.0, step = 0.1),\n#         ui.input_slider(\"C_4\", \"Friday\", 0, 5, value = 3.0, step = 0.1),\n#         ui.input_slider(\"C_5\", \"Saturday\", 0, 5, value = 2.8, step = 0.1),\n#         ui.input_slider(\"C_6\", \"Sunday\", 0, 5, value = 1.0, step = 0.1),\n#         position=\"right\",\n#         bg=\"#f8f8f8\",\n#         open=\"open\"\n#     ),\n#     ui.output_plot(\"plot_dummy\"),\n# ),\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A scatterplot\")\n    def plot():\n        \n        fig, ax = plt.subplots()\n        plt.title(\"Test\")\n        x = data[:,0]\n        y = data[:,1]\n        ax.scatter(x, y)\n\n        return fig\n\n    @output\n    @render.plot(alt=\"A scatterplot\")\n    def plot_dummy():\n        C_1 = input.C_1_dummy()\n        C_2 = input.C_2_dummy()\n        C_3 = input.C_3_dummy()\n        C_4 = input.C_4_dummy()\n        C_5 = input.C_5_dummy()\n        C_6 = input.C_6_dummy()\n        C_7 = input.C_7_dummy()\n\n        fig, axs = plt.subplots(1,1)\n\n        x = data[:,0]\n        y = data[:,1]\n        axs.scatter(x, y, color = 'slategrey', s= 5)\n\n        top_x = 7*3\n        xs = np.linspace(0,top_x, 1000)\n\n        alpha = 0.6\n        axs.fill_between(xs, C_1 * dummy(xs, start= 0), alpha = alpha)\n        axs.fill_between(xs, C_2 * dummy(xs, start= 1), alpha = alpha)\n        axs.fill_between(xs, C_3 * dummy(xs, start= 2), alpha = alpha)\n        axs.fill_between(xs, C_4 * dummy(xs, start= 3), alpha = alpha)\n        axs.fill_between(xs, C_5 * dummy(xs, start= 4), alpha = alpha)\n        axs.fill_between(xs, C_6 * dummy(xs, start= 5), alpha = alpha)\n        axs.fill_between(xs, C_7 * dummy(xs, start= 6), alpha = alpha)\n\n        total = dummy_model(\n            xs,\n            C_1, \n            C_2, \n            C_3, \n            C_4, \n            C_5, \n            C_6, \n            C_7\n        )\n\n\n        \n\n\n        pred_y = dummy_model(\n            x,\n            C_1,\n            C_2,\n            C_3, \n            C_4, \n            C_5, \n            C_6, \n            C_7\n        )\n\n        mse = np.mean((y - pred_y)**2)\n\n        axs.plot(\n            xs, \n            total,\n            color = 'fuchsia',\n            ls = '--',\n            label = f'Your model MSE: {mse:.3f}'\n        )\n\n        if input.best_fit_dummy():\n            # plot best fit (cannot be bothered to refit here, just use values from notebook)\n\n            C_1 = 2.36\n            C_2 = 3.62\n            C_3 = 3.93\n            C_4 = 3.25\n            C_5 = 3.29\n            C_6 = 3.04\n            C_7 = 2.10\n\n            total = dummy_model(\n                xs,\n                C_1, \n                C_2, \n                C_3, \n                C_4, \n                C_5, \n                C_6, \n                C_7\n            )\n\n            pred_y = dummy_model(\n                x,\n                C_1,\n                C_2,\n                C_3, \n                C_4, \n                C_5, \n                C_6, \n                C_7\n            )\n\n            mse = np.mean((y - pred_y)**2)\n\n            axs.plot(\n                xs, \n                total,\n                color = 'darkorchid',\n                label = f'Best fit MSE: {mse:.3f}'\n            )\n\n        \n        axs.set_xlim(0,top_x)\n        axs.set_ylim(0,6.5)\n\n        # Define the days of the week\n        days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\n        # Set xticks and labels\n        plt.xticks(np.arange(0, max(xs) + 1, 1), [days_of_week[int(day) % 7] for day in np.arange(0, max(xs) + 1, 1)], rotation=90)\n\n        axs.set_ylabel('y')\n\n        axs.legend(bbox_to_anchor=(0, 1, 1, 0), loc=\"lower left\", ncol=2)\n        \n        return fig\n    \n    @output\n    @render.plot(alt=\"A scatterplot\")\n    def plot_rbf():\n        width = input.width()\n        C_1 = input.C_1_rbf()\n        C_2 = input.C_2_rbf()\n        C_3 = input.C_3_rbf()\n        C_4 = input.C_4_rbf()\n        C_5 = input.C_5_rbf()\n        C_6 = input.C_6_rbf()\n        C_7 = input.C_7_rbf()\n\n        fig, axs = plt.subplots(1,1)\n\n        x = data[:,0]\n        y = data[:,1]\n        axs.scatter(x, y, color = 'slategrey', s= 5)\n\n        top_x = 7*3\n        xs = np.linspace(0,top_x, 1000)\n\n        alpha = 0.6\n        axs.fill_between(xs, C_1 * rbf(xs, width = width, center= 0), alpha = alpha)\n        axs.fill_between(xs, C_2 * rbf(xs, width = width, center= 1), alpha = alpha)\n        axs.fill_between(xs, C_3 * rbf(xs, width = width, center= 2), alpha = alpha)\n        axs.fill_between(xs, C_4 * rbf(xs, width = width, center= 3), alpha = alpha)\n        axs.fill_between(xs, C_5 * rbf(xs, width = width, center= 4), alpha = alpha)\n        axs.fill_between(xs, C_6 * rbf(xs, width = width, center= 5), alpha = alpha)\n        axs.fill_between(xs, C_7 * rbf(xs, width = width, center= 6), alpha = alpha)\n\n        total = rbf_model(\n            xs,\n            C_1, \n            C_2, \n            C_3, \n            C_4, \n            C_5, \n            C_6, \n            C_7,\n            width=width\n        )\n\n\n        \n\n        \n\n        pred_y = rbf_model(\n            x,\n            C_1,\n            C_2,\n            C_3, \n            C_4, \n            C_5, \n            C_6, \n            C_7,\n            width=width\n        )\n\n        mse = np.mean((y - pred_y)**2)\n        # sum_of_squares = np.sum((data['y'] - data['y'].mean())**2)\n\n        # R2 = 1 - sum_of_residuals/sum_of_squares\n\n        # axs.set_title(f\"MSE: {mse:.3f}\", size = 14)\n        axs.plot(\n                xs, \n                total,\n                color = 'fuchsia',\n                ls = '--',\n                label = f'Your model MSE: {mse:.3f}'\n            )\n\n        if input.best_fit_rbf():\n            # plot best fit (cannot be bothered to refit here, just use values from notebook)\n\n            coeffs = fit_rbf()\n            width = input.width()\n            X_train = np.column_stack([rbf(xs, width = width, center =  center,) for center in range(1, 8)])\n            y_to_plot = np.dot(X_train, coeffs)\n            \n            X = np.column_stack([rbf(x, width = width, center =  center,) for center in range(1, 8)])\n            y_pred = np.dot(X, coeffs)\n\n            mse = np.mean((y - y_pred)**2)\n\n            axs.plot(\n                xs, \n                y_to_plot,\n                color = 'darkorchid',\n                label = f'Best fit MSE: {mse:.3f}'\n            )\n\n        axs.set_xlim(0,top_x)\n        # axs.set_ylim(0,6.5)\n\n        # Define the days of the week\n        days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\n        # Set xticks and labels\n        plt.xticks(np.arange(0, max(xs) + 1, 1), [days_of_week[int(day) % 7] for day in np.arange(0, max(xs) + 1, 1)], rotation=90)\n\n        axs.set_ylabel('y')\n\n        axs.legend(bbox_to_anchor=(0, 1, 1, 0), loc=\"lower left\", ncol=2)\n\n        return fig\n    \n    @output\n    @render.plot(alt=\"A scatterplot\")\n    def plot_fourier():\n        C_cos_1 = input.C_cos_1()\n        C_cos_2 = input.C_cos_2()\n        C_sin_1 = input.C_sin_1()\n        C_sin_2 = input.C_sin_2()\n\n\n        fig, axs = plt.subplots(1,1)\n\n        x = data[:,0]\n        y = data[:,1]\n        axs.scatter(x, y, color = 'slategrey', s= 5)\n\n        top_x = 7*3\n        xs = np.linspace(0,top_x, 1000)\n\n        alpha = 0.6\n        axs.plot(xs, C_cos_1 * fourier_component(xs/7, \"cos\", 1), alpha = alpha)\n        axs.plot(xs, C_sin_1 * fourier_component(xs/7, \"sin\", 1), alpha = alpha)\n        axs.plot(xs, C_cos_2 * fourier_component(xs/7, \"cos\", 2), alpha = alpha)\n        axs.plot(xs, C_sin_2 * fourier_component(xs/7, \"sin\", 2), alpha = alpha)\n        \n        total = fourier_model(\n            xs,\n            C_cos_1,\n            C_sin_1,\n            C_cos_2,\n            C_sin_2,\n        ) + np.mean(y)\n\n\n        \n\n        \n\n        pred_y = fourier_model(\n            x,\n            C_cos_1,\n            C_sin_1,\n            C_cos_2,\n            C_sin_2,\n        ) + np.mean(y)\n\n        mse = np.mean((y - pred_y)**2)\n        # sum_of_squares = np.sum((data['y'] - data['y'].mean())**2)\n\n        # R2 = 1 - sum_of_residuals/sum_of_squares\n\n        # axs.set_title(f\"MSE: {mse:.3f}\", size = 14)\n        axs.plot(\n                xs, \n                total,\n                color = 'fuchsia',\n                ls = '--',\n                label = f'Your model MSE: {mse:.3f}'\n        )\n\n        if input.best_fit_fourier():\n            # plot best fit (cannot be bothered to refit here, just use values from notebook)\n\n            coeffs = fit_fourier()\n\n            n_order = input.n_order()\n            X_train = np.column_stack([\n                fourier_component(xs/7, func, order)\n                for order in range(1, n_order + 1)\n                for func in (\"sin\", \"cos\")\n            ])\n            y_to_plot = np.dot(X_train, coeffs) + np.mean(y)\n            \n            X = get_fourier_X()\n            y_pred = np.dot(X, coeffs) + np.mean(y)\n\n            mse = np.mean((y - y_pred)**2)\n\n            axs.plot(\n                xs, \n                y_to_plot,\n                color = 'darkorchid',\n                label = f'Best fit MSE: {mse:.3f}'\n            )\n\n        axs.set_xlim(0,top_x)\n        # axs.set_ylim(0,6.5)\n\n        # Define the days of the week\n        days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n\n        # Set xticks and labels\n        plt.xticks(np.arange(0, max(xs) + 1, 1), [days_of_week[int(day) % 7] for day in np.arange(0, max(xs) + 1, 1)], rotation=90)\n\n        axs.set_ylabel('y')\n\n        axs.legend(bbox_to_anchor=(0, 1, 1, 0), loc=\"lower left\", ncol=2)\n        print(fig)\n        return fig\n    \n    @reactive.Calc\n    def get_rbf_X():\n        \n        width = input.width()\n\n        x = data[:,0]\n        # Creating RBF features\n        X = np.column_stack([rbf(x, width = width, center =  center) for center in range(1, 8)])\n        \n        return X\n    \n    @reactive.Calc\n    def fit_rbf():\n        X = get_rbf_X()\n        \n        to_fit_y = data[:,1].copy()\n\n        # Perform OLS to solve for coefficients\n        XtX = np.dot(X.T, X)\n        XtX_inv = np.linalg.inv(XtX)\n        Xty = np.dot(X.T, to_fit_y)\n        beta = np.dot(XtX_inv, Xty)\n        return beta\n    \n    @reactive.Calc\n    def get_fourier_X():\n        \n        n_order = input.n_order()\n\n        x = data[:,0]\n        # Creating RBF features\n        X = np.column_stack([\n            fourier_component(x/7, func, order)\n            for order in range(1, n_order + 1)\n            for func in (\"sin\", \"cos\")\n        ])\n        return X\n    \n    @reactive.Calc\n    def fit_fourier():\n\n        X = get_fourier_X()\n        \n        to_fit_y = data[:,1].copy()\n        to_fit_y -= np.mean(to_fit_y)\n\n        # Perform OLS to solve for coefficients\n        XtX = np.dot(X.T, X)\n        XtX_inv = np.linalg.inv(XtX)\n        Xty = np.dot(X.T, to_fit_y)\n        beta = np.dot(XtX_inv, Xty)\n\n        return beta\n    \n\n\n        \n\n\napp = App(app_ui, server, debug=False)\n", "type": "text"}, {"name": "custom.mplstyle", "content": "# Seaborn common parameters\n# .15 = dark_gray\n# .8 = light_gray\nfigure.facecolor: white\ntext.color: .15\naxes.labelcolor: .15\nlegend.frameon: False\nlegend.numpoints: 1\nlegend.scatterpoints: 1\nxtick.direction: out\nytick.direction: out\nxtick.color: .15\nytick.color: .15\naxes.axisbelow: True\nimage.cmap: Greys\nfont.family: sans-serif\nfont.sans-serif: Arial, Liberation Sans, DejaVu Sans, Bitstream Vera Sans, sans-serif\ngrid.linestyle: -\nlines.solid_capstyle: round\nlines.linewidth : 2\nlines.markersize : 3\n\n# Seaborn whitegrid parameters\naxes.grid: True\naxes.facecolor: white\ngrid.color: .8\nxtick.major.size: 2\nytick.major.size: 0\nxtick.minor.size: 1\nytick.minor.size: 0\n\n## custom\n\n#cycler\naxes.prop_cycle: cycler('color', ['00a88f','ff9da1','160078','ffc508','ff6120','004ff9','ac3200'])\n\n# grid\naxes.grid.axis:  y    # which axis the grid should apply to\naxes.grid.which:  major   # grid lines at {major, minor, both} ticks\n\n#font size\nfont.size : 12\naxes.titlesize : 14\nfigure.titlesize: 14\naxes.labelsize : 12\nxtick.labelsize : 10\nytick.labelsize : 10\nlegend.fontsize : 10\n\n# label pad\naxes.labelpad:      8.0     # space between label and axis\n\n# spines\naxes.spines.left:   False  # display axis spines\naxes.spines.bottom: True\naxes.spines.top:    False\naxes.spines.right:  False\n\n# DATES\ndate.autoformatter.year:        %y\ndate.autoformatter.month:       %m/%y\ndate.autoformatter.day:         %d/%m/%y\ndate.autoformatter.hour:        %m-%d %H\ndate.autoformatter.minute:      %d %H:%M\ndate.autoformatter.second:      %H:%M:%S\ndate.autoformatter.microsecond: %M:%S.%f\n\n# figsize\nfigure.figsize:     10, 8  # figure size in inches\n", "type": "text"}, {"name": "weekly_seasonality.csv", "content": "110.49019302197418,186.45444425113465\n72.55048818871273,195.34924719018437\n84.87879047579622,183.92238319460296\n94.08864688401742,186.51203619096862\n114.11426122205337,232.53882081083822\n102.244441964442,226.68454400622562\n128.98049736200068,242.19861442213488\n78.44502899073183,218.08079085019602\n121.78019966445825,287.7647347708214\n167.8173453753252,271.06346426407663\n112.91011883358678,291.60687613136474\n124.70765204138539,287.11868340461706\n96.06242022614285,261.05012423423847\n118.43795676364215,253.37288617968\n118.82532820984561,284.2161721963673\n101.49170773663849,340.44094946585517\n142.07816637265796,320.48173877703454\n146.68174163637775,256.73847094131423\n149.40721255898322,324.3155986450909\n169.61844903809677,289.83610425378896\n147.39060262001763,331.30665594550726\n103.7416633984524,321.89060217711756\n146.96904327423584,330.90878963750816\n198.4688854136516,323.1106748404874\n181.79655077391013,352.0479108960054\n130.78333076045186,334.92178460918285\n155.60865276579827,359.3135131264105\n136.4501930042607,341.76504695893635\n166.46366318755724,333.6936663262905\n172.18156848273873,398.80588788694604\n160.31278491617,365.06872840719177\n182.52537256950714,373.25217976653914\n205.3953256682728,318.7763401155951\n209.22153377248034,345.6210203034885\n193.45746052486575,345.6165514714886\n180.37650602631302,389.3528583242119\n172.59517452289484,335.05542268963245\n176.72711746434553,420.38481146482184\n167.43431734663605,403.1516031475252\n200.33690035880468,383.7880940563273\n190.7580436089037,350.2154562599012\n204.7695709720143,362.51142687283044\n209.07817237360123,338.6157681180482\n228.91941109702643,388.1138748320497\n189.74177062395233,366.9074177071744\n213.79363677257473,383.59550486981755\n254.24912765655571,348.66884818614903\n277.56723516953923,393.39911708531474\n226.5878836491815,404.7627012084387\n320.5969533047215,362.42879597844694\n217.66426416446785,327.2330045144106\n226.25409360480563,310.04062782691636\n289.76983371028007,356.0296896653807\n215.54928158398712,359.8526157827347\n270.6446843951958,385.6581052828156\n275.4378342555004,379.31762046653563\n235.6747206658973,331.52094228323483\n283.67862217237735,363.97069902877155\n323.68523365473425,330.4161936613066\n288.05977430638734,351.7415914098408\n271.2796661689931,376.3863163549492\n293.38210826140556,325.8015854254762\n261.2820870984644,317.5798849372289\n305.3435081223379,319.12155641175787\n293.0767325860439,249.00080989913994\n339.65403023375836,266.45363432487636\n317.9467594268958,341.05119600025466\n343.1451841565023,293.15045006669584\n281.2769359220838,257.4532473484021\n324.26952507909465,339.5370596184989\n276.2275832831443,271.60378242780973\n329.31541845507456,241.18036055305595\n336.8501420818647,265.90280548863825\n354.67249175073664,290.14483425115225\n346.1832569516504,273.76912469217586\n362.3104599611572,240.82393383587169\n375.932930831973,294.38143370080576\n369.6387014947927,261.54926769428585\n346.9903957815875,241.32701187684188\n344.7217826657114,289.092522207689\n373.1670537795235,296.6804114304445\n362.882277785232,256.0199179907996\n364.5018725597561,268.5754772070644\n340.6195190533038,270.86303431665374\n390.3003349811065,203.86650912869823\n389.8389172430582,268.36803135124717\n401.4413239992245,259.2397051782762\n468.65130526806405,244.79652749931185\n399.88604921481397,265.08057034186197\n408.0930314369596,277.44611689235245\n418.6743415627644,235.8300170552721\n419.5244848010688,250.62439599061744\n420.03287218612166,258.1996234893528\n424.3791201677779,294.52831244925903\n444.68029958612533,297.0072774884612\n402.0557549617048,258.698539180784\n450.0126006507601,288.67367322180826\n397.3485528437716,269.1782518823761\n447.250635181909,284.17837993811213\n391.9265435640518,273.66032376186183\n443.19770975888696,285.0247908976797\n436.95585382184106,284.3085463939395\n470.224850443122,227.74828776817765\n407.32503716581857,284.2751657359437\n482.3486267201887,267.2942480101476\n488.6224675256908,266.0071923743177\n501.18498333287516,299.9639572513291\n479.7772310321117,318.3962033265865\n468.9485679892607,264.73924471295\n463.80428424653326,277.3997515452227\n483.71404052884,300.0410482473585\n539.6166102756774,296.0643654217267\n518.8185000159269,273.3799107253501\n506.1622951634746,251.14018207041633\n549.2511139738875,308.74283661055057\n552.2960558639697,251.95969338343428\n534.2669876145386,230.6711219337194\n543.9073601704182,274.51098118575555\n563.3966221660517,223.47564653033726\n574.8590089090228,248.2163879466311\n579.065140109965,217.46482047096845\n547.0037651671915,275.0797230590093\n582.8514849955795,268.5123609861436\n577.0825178706327,218.42916763703067\n659.1077916997539,279.09073475180094\n598.5878850969576,233.71778325851494\n599.1466359964401,214.29705542815924\n624.4267799064473,232.31576178710446\n592.4648032871971,225.4222516048385\n640.4603525977203,216.93987891759218\n623.769329693941,214.83608610281067\n630.8705222226449,192.97382520987844\n650.9901643686345,228.17869903245128\n641.5386217628693,213.56867090964812\n625.8201556553298,190.51323733017392\n628.1713016800609,172.1918438970664\n660.4526806852276,204.24627538628124\n625.7940105942791,211.84459942773913\n612.7605796440961,198.17343900160841\n593.4302523942744,156.10874337584892\n633.7949769471527,140.69675516010648\n662.076067298045,181.70803419095864\n627.5817898711986,186.7248177467808\n602.003344520934,204.37287303964962\n634.6975865138736,167.8126178104527\n671.0891818953094,218.2305462249402\n637.833138993494,184.58625805389283\n636.9552354667653,192.60602643391002\n683.8837778039779,142.8601489188075\n714.9088769714544,121.48753665476761\n87.44155421484558,180.11498888154887\n115.23072454618814,197.01803532972804\n95.68999766423221,213.92376086219218\n81.15288925709169,186.96343000887737\n69.8321826288543,214.77387238592326\n46.2976187756164,188.20896695820625\n50.94802507418902,133.55436629840852\n84.95441303287778,218.93214794946192\n123.48490426644445,165.82752015933136\n79.7264063269367,166.10589353779733\n119.2329530616629,172.0136616103464\n652.3467879093575,198.22005570873966\n652.205983347551,156.55536280583766\n682.5176154306494,159.99068055965273\n707.3054541534365,176.4196965609275\n692.3369747475616,141.30471404683726\n657.5795928284667,135.55890473340622\n664.211723377291,169.82193088623023\n686.5772727515935,166.91600390065105\n644.7508505460514,114.74222160403457\n645.865348547494,186.4693399042248\n661.3098025173606,151.83995231641774\n662.1364548097491,145.84670994768487\n733.143496326521,162.79696299932345\n681.0069403159354,168.68376526280645\n673.5825254707759,160.88693143324883\n678.2711565952845,137.8616489851667\n646.9805971368098,131.09847019537818\n681.3542294158137,150.8815647322901\n645.592513413078,188.3662636775498\n336.3837354309228,245.75935912566462\n353.2559483788943,281.95557701232275\n361.2442052570636,281.69047366553696\n340.7474970946149,283.2080927387854\n299.708315600131,302.3100350043077\n299.7599296580865,315.54464443507004\n342.1274330788661,354.37011898075025\n315.01069889211914,289.8619367675652\n275.3117890024259,259.74525867004\n317.5651682960598,272.56257751390604\n291.8477063350684,289.70947457417583\n344.75474658778035,261.7704551479312\n293.9740483785963,239.8972663360003\n274.3719109679635,314.79351380508035\n78.6351043110093,213.41094772864005\n85.43918443702299,179.97548283558422\n92.66504574031944,145.19551287182162\n69.24866382838925,213.48728050434067\n116.96239894236385,157.98001651727566\n68.64418886380422,176.90630640715324\n82.44414709487368,174.12597598627542\n43.12613059402559,172.6148847975707\n72.26460691035292,190.08161313174787\n84.19248724272776,187.93445494208248\n47.84060547982334,160.9376374117831\n81.11686945629661,169.4179431202304\n51.667191627677276,190.91068208612813\n60.59984168428028,154.27790974565232\n81.78079637601678,108.20248177999184\n78.45600660207539,172.4595168315879\n56.03026990481252,164.3983462392381\n13.263015452323557,206.60911309618734\n38.10353510934076,132.82256420250837\n62.88810979841748,152.64113381053392\n109.59804461825632,192.7136921847503\n109.34500895229174,244.5328525722371\n114.49501298408549,191.83634486765084\n80.57036785200273,219.31838045819245\n106.03535096576704,287.2727520437892\n129.21831786211905,183.818086180023\n104.64361008745367,268.55324421518907\n136.70629310582248,250.1909764960493\n70.27595480425097,278.98673218977535\n82.973986999046,299.3146052215704\n158.74033885151962,293.2668300670965\n155.09082118738507,284.3807734019895\n123.20181284306086,315.0867777742711\n124.71347988217019,321.76447828805493\n132.51922255489737,334.2554679353309\n135.9746230000603,353.66481450431803\n111.98626106574388,290.578879314359\n151.67818936224992,327.466150485061\n159.07383763541694,353.55558019061846\n220.54233947625266,361.9269873521297\n144.94005352513176,373.6719492460206\n317.09574569735577,308.2846202523215\n348.8904044999065,287.090774053023\n330.3639774034288,265.4670101783189\n344.1030117155602,303.7574407783675\n327.4983680878969,284.9540801308622\n339.6474905877254,302.86568592045967\n387.83581686663683,319.5637946790929\n374.07912866327865,298.12929750339583\n380.368798877136,258.2922578227483\n322.5444525911156,267.7752794842984\n289.01296230062405,285.4430795051868\n377.2066361948422,296.72624053115527\n369.4115846291436,297.60791174025843\n361.51689758614833,267.5537608890505\n356.41167356832005,225.63091460993826\n350.1500680847744,181.3180531709831\n413.77930797718545,218.67909879897985\n341.1238644038435,216.69794443548147\n348.21135860409015,243.78393224380437\n385.2818420828836,246.43891836523653\n399.36618222849455,228.4463464355262\n423.67600500717134,279.77438405957946\n432.5038181573286,232.09711614845855\n420.9299080576216,226.4985539445791\n392.38274160561343,264.191555641782\n447.949284660969,268.5835762263887\n455.6055420616283,254.360550963495\n442.7539573874614,246.7846588276729\n401.2409039608666,254.42373189776214\n478.23309237566616,263.04562410929884\n454.15147065177945,297.9069702015655\n485.00727193533265,324.8812122410361\n513.2632829862964,270.06382466039634\n490.37551373213455,300.38865842366204\n481.68443572286,268.13635674158695\n496.12914533036,298.9799556789968\n487.8381626209566,259.42165551455776\n469.92786558939883,333.07964299463947\n566.3218856715431,327.17364428579754\n545.221662764719,266.50491796917714\n539.1435582361588,282.8173907227249\n527.519750197012,283.49334054553026\n502.09115696569984,308.59271256555326\n520.5700618218348,309.83527268875434\n572.8094196072443,253.74612783787214\n563.2689755268991,306.4931129454866\n507.8907730496912,291.94714741569413\n567.4933537066432,280.56817304412687\n516.5391895688152,277.1842193806509\n582.2423482091592,260.13416725823276\n575.6382795100167,293.04397444895085\n600.1492420974444,285.47308646888814\n566.3527284546687,293.6197953438011\n616.973545985095,273.9888588083041\n616.2772096219911,273.5316654464911\n621.1873545786516,240.97017457275655\n570.9491225975362,227.76951434047174\n518.9769600200027,267.7703941793875\n539.8348004990631,232.81213723980443\n518.5128840691831,280.1765941290567\n466.77614754876544,283.6185476655087\n451.40066197954087,266.88162007308836\n514.6873374411306,244.57058854383934\n532.8833082839305,312.46878197900537\n520.0309712988883,299.3438276028562\n527.7030505520311,304.4973968695996\n542.6367243242576,330.2724490118569\n540.447578801348,285.82883160945676\n566.2835354923941,298.0182486445215\n556.0685698384829,271.0459758429861\n588.404211554759,256.02213512657266\n593.9512818851038,296.2336943463922\n547.5042946560835,246.04721722879353\n606.7724669730296,279.3419128918397\n638.4385435487884,197.87469381948426\n575.29206853511,271.6255218947151\n654.5744185463694,269.1346026581027\n599.3926905429826,241.95517563419008\n595.8145953253089,230.98160917920927\n626.1792692819885,307.5023831507209\n576.6823176125184,250.38512546461953\n", "type": "text"}]